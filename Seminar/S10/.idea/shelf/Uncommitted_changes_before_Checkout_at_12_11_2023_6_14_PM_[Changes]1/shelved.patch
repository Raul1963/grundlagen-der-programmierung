Index: .idea/modules.xml
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/modules.xml	
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/S10.iml" filepath="$PROJECT_DIR$/.idea/S10.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: ../S9/main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../S9/main.py b/../S9/main.py
new file mode 100644
--- /dev/null	
+++ b/../S9/main.py	
@@ -0,0 +1,41 @@
+class Animal:
+    def __init__(self, name):
+        self.name=name
+
+    def eat(self,w):
+        print(f'{self.name} eating {w}')
+
+class Pig(Animal):
+    def __init__(self,name,age):
+        Animal.__init__(self, name)
+        self.age=age
+    def sleep(self):
+        print(f'{self.name} sleeping')
+
+class Chicken(Animal):
+    def __init__(self,name, color):
+        Animal.__init__(self,name)
+        self.color=color
+
+class Farm:
+    def __init__(self,name,city,animals=[]):
+        self.name=name
+        self.city=city
+        self.animals=animals
+    def feed_animals(self,food):
+        for animal in self.animals:
+            animal.eat(food)
+
+def main():
+    bob=Animal('bob')
+    bob.eat('plante')
+    zob=Pig('zob',2)
+    zob.eat('ceva')
+    zob.sleep()
+    lob=Chicken('lob', 'black')
+    lob.eat('iarba')
+
+    f=Farm('ferma verde', 'cluj',[bob,zob,lob])
+    f.feed_animals('plante')
+
+main()
\ No newline at end of file
Index: ../S9/data.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../S9/data.txt b/../S9/data.txt
new file mode 100644
--- /dev/null	
+++ b/../S9/data.txt	
@@ -0,0 +1,3 @@
+21A,100
+21A,100
+01A,20,Windows
Index: ../S9/main2.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../S9/main2.py b/../S9/main2.py
new file mode 100644
--- /dev/null	
+++ b/../S9/main2.py	
@@ -0,0 +1,61 @@
+class Raum:
+    def __init__(self,no,seats):
+        self.no=no
+        self.seats=seats
+    def __str__(self):
+        return f'{self.no},{self.seats}'
+    def __eq__(self,other):
+        return self.no==other.no
+
+class Lab(Raum):
+    def __init__(self, no, seats,os):
+        Raum.__init__(self,no,seats)
+        if os not in ['Unix','Linux','Windows']:
+            raise AttributeError("os not allowed...")
+        self.os=os
+
+    def __str__(self):
+        return f'{self.no},{self.seats},{self.os}'
+
+class Building():
+    def __init__(self, rooms):
+        self.rooms=rooms
+    def seats(self):
+        for room in self.rooms:
+            print(room.seats)
+
+    def write_data(self):
+        f=open('data.txt','w')
+        for room in self.rooms:
+            f.write(str(room)+'\n')
+            # if type(room)==Lab:
+            #     f.write(f'{room.no},{room.seats},{room.os}\n')
+            # else:
+            #     f.write(f'{room.no},{room.seats}\n')
+
+        f.close()
+
+    def read_data(self):
+        f=open('data.txt','r')
+        for line in f:
+            attrs=line.strip().split(',')
+            if len(attrs)==2:
+                self.rooms.append(Raum(attrs[0],attrs[1]))
+            else:
+                self.rooms.append(Lab(attrs[0],attrs[1],attrs[2]))
+        f.close()
+def main():
+    r1=Raum('21A',100)
+    r2=Raum('21A',100)
+
+    l1=Lab('01A',20,'Windows')
+    print(l1)
+
+    b=Building([r1,r2,l1])
+
+    #b.write_data()
+    b.read_data()
+    b.seats()
+    #print(r1==r2)
+
+main()
Index: ../S8/main2.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../S8/main2.py b/../S8/main2.py
new file mode 100644
--- /dev/null	
+++ b/../S8/main2.py	
@@ -0,0 +1,103 @@
+import math
+# l = []
+# l = l.__add__([1])
+# print(l)
+def read_list(filename):
+    f = open (filename ,'r')
+    l = [int(num) for line in f for num in line.strip().split(',')]
+    f.close()
+    return l
+
+def build_and_check(num):
+    nc = int(math.log10(num)) + 1
+    k = nc % 3 #posibile poz mult de trei
+    num //= 10 ** k
+    nr_nou = 0
+    ogl = 0
+    p = 1
+    while num != 0:
+        uc = num % 10
+        num //= 1000
+        nr_nou = nr_nou * 10 + uc
+        ogl = ogl + p * uc
+        p *= 10
+    return nr_nou == ogl
+
+
+
+def transfer(l, filename):
+    with open(filename , 'w') as file:
+        for num in l:
+            if build_and_check(num):
+                file.write(str(num) + '\n')
+
+def sub_matrix(m1, m2):
+    m3 =[]
+    for i in range(len(m1)):
+        line = []
+        for j in range(len(m1)):
+            line.append(m1[i][j] - m2[i][j])
+        m3.append(line)
+    return m3
+
+def sort_line(line, matrix):
+    return sorted(matrix[line], key=lambda x:list(x)[1])
+
+def main():
+
+    l = read_list('input')
+    # # print(build(123))
+    # # print(build(23))
+    # # print(build(1000))
+    print(build_and_check(123456789))
+    print(build_and_check(123456783))
+    transfer(l, 'output')
+
+    m1 = [
+          [{1,2}, {1}, {2,5}],
+          [{1,2,3}, {3,4,5}, {5,6,7}],
+          [{0,1}, {7,9}, {3,4}]
+        ]
+
+    m2 = [
+          [{1,4}, {1}, {2,8}],
+          [{1,6,3}, {3,4,5}, {5,6,3}],
+          [{0,1}, {7,2}, {9,4}]
+        ]
+    print(sub_matrix(m1,m2))
+    print(sort_line(1, m2))
+main()
+
+def do_stuff(s1):
+    arr=[0]*len(s1)
+    for i in range(len(s1)):
+        w=s1[i-1]
+        s=s1[i]
+        while w>=2 and s1[i]%w:
+            w-=1
+        arr[i]=w
+    for i in range(len(s1)):
+        arr[i]=arr[i]==1
+    return arr
+
+print(do_stuff([1,2,3,4]))
+
+l=[]
+l.insert(0,1)
+print(l)
+
+def f():
+    print("iamuseless")
+print(f)
+
+def do_stuff(s1):
+    arr = [0]*len(s1)
+    for i in range (len(s1)):
+        w = 2
+        while w < s1[i] and s1[i]%w:
+            w *= 2
+        arr[i] = w
+    for i in range(len(arr)):
+        arr[i] = arr[i] <= s1[i]
+    return arr
+print(do_stuff([1,2,3,4]))
\ No newline at end of file
Index: ../S9/data.out
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../S9/data.out b/../S9/data.out
new file mode 100644
--- /dev/null	
+++ b/../S9/data.out	
@@ -0,0 +1,3 @@
+Raum(no=21A,seats=100)
+Raum(no=21A,seats=100)
+Lab(no=01A,seats=20,os=Windows)
Index: ../S9/.idea/S9.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../S9/.idea/S9.iml b/../S9/.idea/S9.iml
new file mode 100644
--- /dev/null	
+++ b/../S9/.idea/S9.iml	
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: ../S9/.idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../S9/.idea/.gitignore b/../S9/.idea/.gitignore
new file mode 100644
--- /dev/null	
+++ b/../S9/.idea/.gitignore	
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: pucnt.py
===================================================================
diff --git a/pucnt.py b/pucnt.py
new file mode 100644
--- /dev/null	
+++ b/pucnt.py	
@@ -0,0 +1,52 @@
+import math
+class Punct:
+    def __init__(self,x,y):
+        self.x=x
+        self.y=y
+
+    def __str__(self):
+        return f'X={self.x},Y={self.y}'
+
+    # def __sub__(self, other):
+    #     return Punct(self.x-other.x,self.y-other.y)
+    def __sub__(self, other):
+        return math.sqrt((self.x-other.x)**2+(self.y-other.y)**2)
+
+class Cerc:
+    def __init__(self,r,c):
+        self.r=r
+        self.c=c
+
+    def __str__(self):
+        return f'Aria={self.aria()}, Raza={self.r}, {self.c}'
+    def aria(self):
+        return math.pi*self.r**2
+
+    def __sub__(self, other):
+        #c=Cerc(self.r-other.r,self.c-other.c) #wrong
+        c=Cerc(self.r-other.r,Punct(self.c.x-other.c.x,self.c.y- other.c.y))
+        return c
+
+def move(c1,c2):
+    while not(c1.c-c2.c<=c1.r+c2.r):
+        c1.c.x+=1
+
+
+
+def main():
+
+    p1=Punct(11,2)
+    p2=Punct(3,5)
+    p3=p1-p2
+    #print(p3.x,p3.y)
+    print(p3)
+    c1=Cerc(5,p1)
+    c2=Cerc(6, Punct(10,3))
+    print(c1.aria(),c1.r, c1.c.x, c1.c.y)
+    #print(c1)
+    #print(f'Aria={c1.aria()}, Raza={c1.r}, X={c1.c.x}, Y={c1.c.y}')
+    move(c1,c2)
+    print(c1)
+    c3=c1-c2
+    print(c3)
+main()
\ No newline at end of file
Index: .idea/inspectionProfiles/profiles_settings.xml
===================================================================
diff --git a/.idea/inspectionProfiles/profiles_settings.xml b/.idea/inspectionProfiles/profiles_settings.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/inspectionProfiles/profiles_settings.xml	
@@ -0,0 +1,6 @@
+<component name="InspectionProjectProfileManager">
+  <settings>
+    <option name="USE_PROJECT_PROFILE" value="false" />
+    <version value="1.0" />
+  </settings>
+</component>
\ No newline at end of file
Index: .idea/misc.xml
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/misc.xml	
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Black">
+    <option name="sdkName" value="Python 3.12" />
+  </component>
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.12" project-jdk-type="Python SDK" />
+</project>
\ No newline at end of file
Index: .idea/.gitignore
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	
+++ b/.idea/.gitignore	
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: .idea/S10.iml
===================================================================
diff --git a/.idea/S10.iml b/.idea/S10.iml
new file mode 100644
--- /dev/null	
+++ b/.idea/S10.iml	
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: ../S8/input
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../S8/input b/../S8/input
new file mode 100644
--- /dev/null	
+++ b/../S8/input	
@@ -0,0 +1,1 @@
+123456789,123456783
Index: .idea/vcs.xml
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/vcs.xml	
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$/../.." vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: ../S8/output
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../S8/output b/../S8/output
new file mode 100644
--- /dev/null	
+++ b/../S8/output	
@@ -0,0 +1,1 @@
+123456783
